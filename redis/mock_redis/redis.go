// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/t4rest/t4rest-go/redis (interfaces: Cacher)

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	"context"
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacher)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacher) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacherMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacher)(nil).Delete), arg0, arg1)
}

// Exists mocks base method.
func (m *MockCacher) Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCacherMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCacher)(nil).Exists), arg0, arg1)
}

// Expire mocks base method.
func (m *MockCacher) Expire(arg0 context.Context, arg1 string, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockCacherMockRecorder) Expire(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockCacher)(nil).Expire), arg0, arg1, arg2)
}

// GetBool mocks base method.
func (m *MockCacher) GetBool(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBool indicates an expected call of GetBool.
func (mr *MockCacherMockRecorder) GetBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockCacher)(nil).GetBool), arg0, arg1)
}

// GetByte mocks base method.
func (m *MockCacher) GetByte(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByte", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByte indicates an expected call of GetByte.
func (mr *MockCacherMockRecorder) GetByte(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByte", reflect.TypeOf((*MockCacher)(nil).GetByte), arg0, arg1)
}

// GetInt mocks base method.
func (m *MockCacher) GetInt(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockCacherMockRecorder) GetInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockCacher)(nil).GetInt), arg0, arg1)
}

// GetStr mocks base method.
func (m *MockCacher) GetStr(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStr", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStr indicates an expected call of GetStr.
func (mr *MockCacherMockRecorder) GetStr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStr", reflect.TypeOf((*MockCacher)(nil).GetStr), arg0, arg1)
}

// Incr mocks base method.
func (m *MockCacher) Incr(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockCacherMockRecorder) Incr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockCacher)(nil).Incr), arg0, arg1)
}

// SetBool mocks base method.
func (m *MockCacher) SetBool(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBool", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBool indicates an expected call of SetBool.
func (mr *MockCacherMockRecorder) SetBool(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockCacher)(nil).SetBool), arg0, arg1, arg2)
}

// SetByte mocks base method.
func (m *MockCacher) SetByte(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetByte", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetByte indicates an expected call of SetByte.
func (mr *MockCacherMockRecorder) SetByte(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetByte", reflect.TypeOf((*MockCacher)(nil).SetByte), arg0, arg1, arg2)
}

// SetExpBool mocks base method.
func (m *MockCacher) SetExpBool(arg0 context.Context, arg1 string, arg2 bool, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpBool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpBool indicates an expected call of SetExpBool.
func (mr *MockCacherMockRecorder) SetExpBool(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpBool", reflect.TypeOf((*MockCacher)(nil).SetExpBool), arg0, arg1, arg2, arg3)
}

// SetExpByte mocks base method.
func (m *MockCacher) SetExpByte(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpByte", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpByte indicates an expected call of SetExpByte.
func (mr *MockCacherMockRecorder) SetExpByte(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpByte", reflect.TypeOf((*MockCacher)(nil).SetExpByte), arg0, arg1, arg2, arg3)
}

// SetExpInt mocks base method.
func (m *MockCacher) SetExpInt(arg0 context.Context, arg1 string, arg2 int, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpInt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpInt indicates an expected call of SetExpInt.
func (mr *MockCacherMockRecorder) SetExpInt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpInt", reflect.TypeOf((*MockCacher)(nil).SetExpInt), arg0, arg1, arg2, arg3)
}

// SetExpStr mocks base method.
func (m *MockCacher) SetExpStr(arg0 context.Context, arg1, arg2 string, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpStr", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpStr indicates an expected call of SetExpStr.
func (mr *MockCacherMockRecorder) SetExpStr(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpStr", reflect.TypeOf((*MockCacher)(nil).SetExpStr), arg0, arg1, arg2, arg3)
}

// SetInt mocks base method.
func (m *MockCacher) SetInt(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInt indicates an expected call of SetInt.
func (mr *MockCacherMockRecorder) SetInt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt", reflect.TypeOf((*MockCacher)(nil).SetInt), arg0, arg1, arg2)
}

// SetStr mocks base method.
func (m *MockCacher) SetStr(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStr", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStr indicates an expected call of SetStr.
func (mr *MockCacherMockRecorder) SetStr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStr", reflect.TypeOf((*MockCacher)(nil).SetStr), arg0, arg1, arg2)
}
